                    
#Область ПрограммныйИнтерфейс

&НаСервере
 Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	 
	 РеквизитОбъект 	= РеквизитФормыВЗначение("Объект");  
	 СтруктураНастроек 	= РеквизитОбъект.ПолучитьСтрутуруНастроек();
	 АдресСервера 		= СтруктураНастроек.АдресСервера;  
	 ApiKey 			= СтруктураНастроек.ApiKey;  
	 
 КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ПраваИНастройки.ЕстьПраваАдминистратора() Тогда
		Элементы.Настройки.Видимость = Ложь;
	КонецЕсли;
	
	Если ВладелецФормы.ИмяФормы = "Документ.Мероприятие.Форма.ФормаДокумента" Тогда
		Мероприятие 		= 	ВладелецФормы.Объект.Ссылка;
		ЗаполнитьСписок();
	Иначе
		Отказ = Истина;
	КонецЕсли;
	ПолучитьСвойства();
	ОбновитьДинамическиеЭлементыФормы();
	
КонецПроцедуры 


#КонецОбласти 

#Область КомандныйИнтерфейс

&НаКлиенте
Процедура Заполнить(Команда)
	
	ЗаполнитьСписок();  
	ОбновитьДинамическиеЭлементыФормы();  
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	ОтправитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьID(Команда)
	
	ПолучитьСвойства(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатус(Команда)
	
	ОбновитьСтатусНаСервере();

КонецПроцедуры

  &НаКлиенте
Процедура ПолучитьКомпании(Команда)
	ПолучитьКомпанииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьСтатистику(Команда)
	ЗапроситьСтатистикуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтатистику(Команда)
	ПолучитьСтатистикуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформацию(Команда)
	ОбновитьИнформациюНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Перенести(Команда)
	
	СтрокиМассив = ТаблицаПропущен.НайтиСтроки(Новый Структура("Перенос", Истина));
	
	Для Каждого Стр Из СтрокиМассив Цикл
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), Стр); 
		ТаблицаПропущен.Удалить(Стр);
	КонецЦикла;  
	
	
	ОбновитьДинамическиеЭлементыФормы();
КонецПроцедуры
#КонецОбласти

#Область СлужебныеФункцииИПроцедуры

Процедура ОбновитьДинамическиеЭлементыФормы()
	
	Элементы.ДекорацияКоличествоВсего.Заголовок 	= Таблица.Количество() + ТаблицаПропущен.Количество();   
	Элементы.ДекорацияКоличествоГотов.Заголовок 	= Таблица.Количество();
	Элементы.ДекорацияКоличествоНеГотов.Заголовок 	= ТаблицаПропущен.Количество();
	Элементы.ДекорацияКоличествоДубль.Заголовок 	= Таблица.НайтиСтроки(Новый Структура("Дубль", Истина)).Количество();   
	
	Если idКниги > 0 Тогда
		Элементы.Статус.Заголовок = "Группа рассылки создана. Идентификатор: " + Строка(idКниги);
		Элементы.Статус.ЦветТекста = WebЦвета.Зеленый;   
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(mailid) Тогда
		Элементы.СтатусПисьмо.Заголовок = "Письмо рассылки создано. Идентификатор: " + mailid;
		Элементы.СтатусПисьмо.ЦветТекста = WebЦвета.Зеленый;   
	КонецЕсли; 
	
	Если НЕ ПустаяСтрока(Status) Тогда
		Элементы.СтатусРассылка.Заголовок = "Рассылка запущена. Статус: " + Status;
		Элементы.СтатусРассылка.ЦветТекста = WebЦвета.Зеленый;   
	КонецЕсли;  	
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСвойства()
	
	Если Не ЗначениеЗаполнено(Мероприятие) Тогда
		Возврат
	КонецЕсли;
	
	Свойство = ПланыВидовХарактеристик.СвойстваДокументов.НайтиПоНаименованию("Unisender.ID книги");

	idКниги = РаботаСДокументами.ПолучитьСвойство(Мероприятие, Свойство);
	
	Если НЕ idКниги = 0 Тогда 
		Для каждого Стр Из Таблица Цикл
		
			Стр.email_list_ids = idКниги;
		
		КонецЦикла; 
	КонецЕсли; 
	
	Свойство = ПланыВидовХарактеристик.СвойстваДокументов.НайтиПоНаименованию("Unisender.ID письма");   
	mailid = РаботаСДокументами.ПолучитьСвойство(Мероприятие, Свойство);
	
	Свойство = ПланыВидовХарактеристик.СвойстваДокументов.НайтиПоНаименованию("Unisender.ИД статистики");
    ИдентификаторСтатистика = РаботаСДокументами.ПолучитьСвойство(Мероприятие, Свойство);
	
	Свойство = ПланыВидовХарактеристик.СвойстваДокументов.НайтиПоНаименованию("Unisender.ИД рассылки");
    ИДРассылки = РаботаСДокументами.ПолучитьСвойство(Мероприятие, Свойство);
	
	Свойство = ПланыВидовХарактеристик.СвойстваДокументов.НайтиПоНаименованию("Unisender.Статус письма");
    Status = РаботаСДокументами.ПолучитьСвойство(Мероприятие, Свойство);
	
	ОбновитьДинамическиеЭлементыФормы();
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьСписок()
	
	Участники = Мероприятие.Участники.Выгрузить(,"Контрагент, email");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МероприятиеУчастники.Контрагент,
	               |	МероприятиеУчастники.email
	               |ПОМЕСТИТЬ вт_Контрагенты
	               |ИЗ
	               |	Документ.Мероприятие.Участники КАК МероприятиеУчастники
	               |ГДЕ
	               |	МероприятиеУчастники.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	вт_Контрагенты.email,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ вт_Контрагенты.Контрагент) КАК Количество
	               |ПОМЕСТИТЬ вт_Дубли
	               |ИЗ
	               |	вт_Контрагенты КАК вт_Контрагенты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	вт_Контрагенты.email
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	вт_Контрагенты.Контрагент,
	               |	вт_Контрагенты.email,
	               |	ЕСТЬNULL(МожноПисать.Значение, ИСТИНА) КАК МожноПисать,
	               |	ЕСТЬNULL(СогласенНаОбработку.Значение, ИСТИНА) КАК СогласенНаОбработку
	               |ПОМЕСТИТЬ вт_Свойства
	               |ИЗ
	               |	вт_Контрагенты КАК вт_Контрагенты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствКонтрагентов.СрезПоследних(, Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваКонтрагентов.МожноПисать)) КАК МожноПисать
	               |		ПО вт_Контрагенты.Контрагент = МожноПисать.Контрагент
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствКонтрагентов.СрезПоследних(, Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваКонтрагентов.СогласенНаОбработку)) КАК СогласенНаОбработку
	               |		ПО вт_Контрагенты.Контрагент = СогласенНаОбработку.Контрагент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(Владелец.Период) КАК Период,
	               |	вт_Контрагенты.Контрагент
	               |ПОМЕСТИТЬ вт_Автомобиль_Период
	               |ИЗ
	               |	вт_Контрагенты КАК вт_Контрагенты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствАвтомобилей.СрезПоследних(, Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваАвтомобилей.Владелец)) КАК Владелец
	               |		ПО вт_Контрагенты.Контрагент = Владелец.Значение
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	вт_Контрагенты.Контрагент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	вт_Автомобиль_Период.Контрагент,
	               |	МАКСИМУМ(ЗначенияСвойствАвтомобилейСрезПоследних.Автомобиль) КАК Автомобиль
	               |ПОМЕСТИТЬ вт_Автомобили
	               |ИЗ
	               |	вт_Автомобиль_Период КАК вт_Автомобиль_Период
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствАвтомобилей.СрезПоследних(, Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваАвтомобилей.Владелец)) КАК ЗначенияСвойствАвтомобилейСрезПоследних
	               |		ПО вт_Автомобиль_Период.Контрагент = ЗначенияСвойствАвтомобилейСрезПоследних.Значение
	               |			И вт_Автомобиль_Период.Период = ЗначенияСвойствАвтомобилейСрезПоследних.Период
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	вт_Автомобиль_Период.Контрагент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	вт_Контрагенты.Контрагент,
	               |	вт_Контрагенты.email КАК Email,
	               |	ВЫБОР
	               |		КОГДА вт_Свойства.МожноПисать = ЛОЖЬ
	               |			ТОГДА ЛОЖЬ
	               |		КОГДА вт_Свойства.СогласенНаОбработку = ЛОЖЬ
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК МожноОтправлять,
	               |	ВЫБОР
	               |		КОГДА вт_Свойства.МожноПисать = ЛОЖЬ
	               |			ТОГДА ""Запрет на отправку писем""
	               |		КОГДА вт_Свойства.СогласенНаОбработку = ЛОЖЬ
	               |			ТОГДА ""Запрет на обработку персональных данных""
	               |		ИНАЧЕ """"
	               |	КОНЕЦ КАК ПричинаОтказа,
	               |	вт_Автомобили.Автомобиль.Модель КАК Model,
	               |	вт_Автомобили.Автомобиль.Модель.Марка КАК Mark,
	               |	ВЫБОР
	               |		КОГДА вт_Дубли.Количество > 1
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Дубль,
	               |	вт_Контрагенты.Контрагент.ЮрФизЛицо КАК ЮрФизЛицо
	               |ИЗ
	               |	вт_Контрагенты КАК вт_Контрагенты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ вт_Свойства КАК вт_Свойства
	               |		ПО вт_Контрагенты.Контрагент = вт_Свойства.Контрагент
	               |		ЛЕВОЕ СОЕДИНЕНИЕ вт_Автомобили КАК вт_Автомобили
	               |		ПО вт_Контрагенты.Контрагент = вт_Автомобили.Контрагент
	               |		ЛЕВОЕ СОЕДИНЕНИЕ вт_Дубли КАК вт_Дубли
	               |		ПО (ПОДСТРОКА(вт_Контрагенты.email, 0, 50) = ПОДСТРОКА(вт_Дубли.email, 0, 50))"; 
	
	Запрос.УстановитьПараметр("ТЗ", Участники);     
	Запрос.УстановитьПараметр("Ссылка", Мероприятие);

	РезультатЗапроса = Запрос.Выполнить();  
	
	ТЗ = РезультатЗапроса.Выгрузить(); 
	СтрокиДопущен = ТЗ.НайтиСтроки(Новый Структура("МожноОтправлять", Истина));
	СтрокиНеДопущен = ТЗ.НайтиСтроки(Новый Структура("МожноОтправлять", Ложь));
	
	Для каждого Стр Из СтрокиДопущен Цикл
		
		НоваяСтрока = Таблица.Добавить();
	    НоваяСтрока.email 				= Стр.email;
		НоваяСтрока.Контрагент 			= Стр.Контрагент; 
		НоваяСтрока.Mark				= Стр.Mark;
		НоваяСтрока.Model 				= Стр.Model;
		НоваяСтрока.МожноОтправлять		= Стр.МожноОтправлять;
		НоваяСтрока.Дубль				= Стр.Дубль;   
		
		Если Стр.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда	
			ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка(Стр.Контрагент), " ");   
			Если ФИО.Количество() > 1 Тогда
				НоваяСтрока.Name = СокрЛП(СтрЗаменить(Строка(Стр.Контрагент),ФИО[0], "")); 
			Иначе
				НоваяСтрока.Name = Строка(Стр.Контрагент);  
			КонецЕсли; 
		Иначе
			НоваяСтрока.Name = Строка(Стр.Контрагент);
		КонецЕсли;
	КонецЦикла;  
	
	Для каждого Стр Из СтрокиНеДопущен Цикл
	
		НоваяСтрока = ТаблицаПропущен.Добавить();
		НоваяСтрока.email 				= Стр.email;
		НоваяСтрока.Контрагент 			= Стр.Контрагент; 
		НоваяСтрока.Mark				= Стр.Mark;
		НоваяСтрока.Model 				= Стр.Model;
		НоваяСтрока.МожноОтправлять		= Стр.МожноОтправлять;
		НоваяСтрока.ПричинаОтказа		= Стр.ПричинаОтказа; 
		НоваяСтрока.Дубль				= Стр.Дубль;   
		
		Если Стр.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда	
			ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка(Стр.Контрагент), " ");   
			Если ФИО.Количество() > 1 Тогда
				НоваяСтрока.Name = СокрЛП(СтрЗаменить(Строка(Стр.Контрагент),ФИО[0], "")); 
			Иначе
				НоваяСтрока.Name = Строка(Стр.Контрагент);  
			КонецЕсли; 
		Иначе
			НоваяСтрока.Name = Строка(Стр.Контрагент);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры  

&НаСервере
Процедура ОтправитьНаСервере()
	
	ОбработкаОбъект	= РеквизитФормыВЗначение("Объект");
	Если idКниги = 0 Тогда 
		строкаОтветаСервера	= ОбработкаОбъект.createList(Мероприятие.Номер);
		ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");   
		Если ТипЗнч(строкаОтветаСервера) = Тип("Число") Тогда  
			idКниги = строкаОтветаСервера;
			Свойство = ПланыВидовХарактеристик.СвойстваДокументов.НайтиПоНаименованию("Unisender.ID книги");
			ЗаписатьСвойство(Мероприятие, Свойство, idКниги); 
			Для Каждого Стр Из Таблица Цикл
				Стр.email_list_ids = idКниги;
			КонецЦикла;
		КонецЕсли;  
	КонецЕсли;    
	
	Если idКниги > 0 Тогда
		ТаблицаВыгрузки = Таблица.Выгрузить(,"email, email_list_ids, Mark, Model, Name");
		Результат = ОбработкаОбъект.importContacts(ТаблицаВыгрузки, Ложь,idКниги);  
		Если Результат И Не ЗначениеЗаполнено(mailid) Тогда
			Метод = "createEmailMessage";
			ИмяСобытия = "Отправить запрос в Unisender методом " + Метод;
			
			ПараметрыСервера = Новый Структура;
			ПараметрыСервера.Вставить("Сервер",	АдресСервера);
			ПараметрыСервера.Вставить("key", 	ApiKey);
			ПараметрыСервера.Вставить("api", Метод);
			ПараметрыСервера.Вставить("ИмяСобытия", ИмяСобытия);

			// подготовка параметров запроса
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("format", "json"); 
            СтруктураПараметров.Вставить("api_key", ApiKey);

			sender_name = "VERRA"; 
			sender_email = "cc@verra.ru";
			subject = "Шаблон от " + ТекущаяДата() + " для " + Мероприятие.Номер; 
			body ="<p>ТЕКСТ ПИСЬМА В ФОРМАТЕ HTML</p>"; 
			list_id = idКниги; 
			text_body = "Тест письма"; 
			generate_text = 0;
			raw_body = "";
			message_format = "text"; 
			tag = "";
			attachments = "";
			template_id = "";
			system_template_id = "";
			wrap_type = "";
			categories = "";
			
			РезультатПисьмо = ОбработкаОбъект.createEmailMessageUnisender(ПараметрыСервера, СтруктураПараметров, 
			sender_name, sender_email, subject, body, list_id, text_body, generate_text, raw_body, 
			message_format, tag, attachments, template_id, system_template_id, wrap_type, categories);
			
			Если ТипЗнч(РезультатПисьмо) = Тип("Структура") Тогда
				Если РезультатПисьмо.Свойство("result") Тогда 
					mailid = Строка(Формат(РезультатПисьмо.result.message_id,"ЧГ=0")); 
					Свойство = ПланыВидовХарактеристик.СвойстваДокументов.НайтиПоНаименованию("Unisender.ID письма");
					ЗаписатьСвойство(Мероприятие, Свойство, mailid);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ОбновитьДинамическиеЭлементыФормы();
КонецПроцедуры 

&НаСервере
Процедура ОбновитьСтатусНаСервере()
	
	Метод = "checkEmail";
	ИмяСобытия = "Отправить запрос в Unisender методом " + Метод;
	
	ПараметрыСервера = Новый Структура;
	ПараметрыСервера.Вставить("Сервер",	АдресСервера);                        
	ПараметрыСервера.Вставить("key", 	ApiKey);
	ПараметрыСервера.Вставить("api", Метод);
	ПараметрыСервера.Вставить("ИмяСобытия", ИмяСобытия);
	
	// подготовка параметров запроса
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("format", "json"); 
	СтруктураПараметров.Вставить("api_key", ApiKey);
	
	ОбработкаОбъект	= РеквизитФормыВЗначение("Объект");
	строкаОтветаСервера	= ОбработкаОбъект.checkEmail(ПараметрыСервера, СтруктураПараметров, mailid);
	Сообщить(строкаОтветаСервера);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");   
	Если ТипЗнч(строкаОтветаСервера) = Тип("Число") Тогда  
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьСвойство(Мероприятие, Свойство, Значение)
	
	 РаботаСДокументами.ЗаписатьСвойствоДокумента(Мероприятие, Свойство, Значение); 

КонецПроцедуры 

&НаСервере
Процедура ПолучитьКомпанииНаСервере()
	
	Метод = "getCampaigns";
	ИмяСобытия = "Отправить запрос в Unisender методом " + Метод;
	
	ПараметрыСервера = Новый Структура;
	ПараметрыСервера.Вставить("Сервер",	АдресСервера);
	ПараметрыСервера.Вставить("key", 	ApiKey);
	ПараметрыСервера.Вставить("api", Метод);
	ПараметрыСервера.Вставить("ИмяСобытия", ИмяСобытия);
	
	// подготовка параметров запроса
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("format", "json"); 
	СтруктураПараметров.Вставить("api_key", ApiKey);
	
	ОбработкаОбъект	= РеквизитФормыВЗначение("Объект");
	ОтветСервера	= ОбработкаОбъект.getCampaigns(ПараметрыСервера, СтруктураПараметров);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");   
	Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда 
		Если Не ОтветСервера.Свойство("result") Тогда
			Возврат
		КонецЕсли;	
		Для Каждого Рез Из ОтветСервера.result Цикл
			ИдРассылки = Строка(Формат(Рез.message_id,"ЧГ=0"));
			Если ИдРассылки = mailid Тогда 
				ИДРассылки = Строка(Формат(Рез.id,"ЧГ=0"));
				
				СвойствоИдРассылка = ПланыВидовХарактеристик.СвойстваДокументов.НайтиПоНаименованию("Unisender.ИД рассылки");  
				ЗначениеИдРассылки = РаботаСДокументами.ПолучитьСвойство(Мероприятие, СвойствоИдРассылка);
				Если ЗначениеИдРассылки <> ИДРассылки Тогда
					ЗаписатьСвойство(Мероприятие, СвойствоИдРассылка, ИДРассылки);  
				КонецЕсли;
				
				Status = ПеревестиСтатус(Рез.Status); 
				СвойствоСтатус = ПланыВидовХарактеристик.СвойстваДокументов.НайтиПоНаименованию("Unisender.Статус письма");  
				ЗначениеСтатус = РаботаСДокументами.ПолучитьСвойство(Мероприятие, СвойствоСтатус);
				Если ЗначениеСтатус <> Status Тогда
					ЗаписатьСвойство(Мероприятие, СвойствоСтатус, Status); 
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;  
	
КонецПроцедуры

Функция ПеревестиСтатус(Статус)

	Соответствие = Новый Соответствие;
    Соответствие.Вставить("waits_censor", 		"Проверка");
    Соответствие.Вставить("censor_hold", 		"Проверка");
    Соответствие.Вставить("declined", 			"Отклонена");
    Соответствие.Вставить("waits_schedule", 	"Ожидает");
    Соответствие.Вставить("scheduled", 			"Запланирована");
	Соответствие.Вставить("in_progress", 		"Выполняется");
    Соответствие.Вставить("analysed", 			"Анализ");
    Соответствие.Вставить("completed", 			"Закончена");
    Соответствие.Вставить("stopped", 			"Остановлена");
    Соответствие.Вставить("canceled", 			"Отменена");  
	
	Возврат Соответствие.Получить(Статус)
	
КонецФункции 

Функция ПеревестиСтатусДоставки(Статус)
	
	Соответствие = Новый Соответствие;
	                                 	
	Соответствие.Вставить("not_sent", 							"Сообщение еще не было обработано.");
	Соответствие.Вставить("ok_sent", 							"Сообщение было отправлено, промежуточный статус до получения ответа о доставке/недоставке.");
	Соответствие.Вставить("ok_delivered", 						"Сообщение доставлено. Может измениться на 'ok_read', 'ok_link_visited', 'ok_unsubscribed' или 'ok_spam_folder'.");
	Соответствие.Вставить("ok_read", 							"Сообщение доставлено и зарегистрировано его прочтение. Может измениться на 'ok_link_visited', 'ok_unsubscribed' или 'ok_spam_folder'.");
	Соответствие.Вставить("ok_fbl", 							"Сообщение доставлено, но помещено в папку «спам» получателем. Может измениться на 'ok_unsubscribed' или 'ok_spam_folder'.");
	Соответствие.Вставить("ok_link_visited", 					"Сообщение доставлено, прочитано и выполнен переход по одной из ссылок. Может измениться на 'ok_unsubscribed' или 'ok_spam_folder'.");
	Соответствие.Вставить("ok_unsubscribed", 					"Сообщение доставлено и прочитано, но пользователь отписался по ссылке в письме. Статус окончательный.");
	Соответствие.Вставить("err_blacklisted", 					"Сообщение отвергнуто из-за блеклистинга. Будет переотправлено.");
	Соответствие.Вставить("err_will_retry", 					"Одна или несколько попыток доставки оказались неудачными, но попытки продолжаются. Статус будет меняться.");
	Соответствие.Вставить("err_resend", 						"Фактически эквивалентен err_will_retry, с некоторыми несущественными внутренними особенностями.");
	Соответствие.Вставить("err_internal", 						"Внутренний сбой. Необходима переотправка письма. Статус окончательный.");
	Соответствие.Вставить("err_user_unknown", 					"Адрес не существует, доставка не удалась. Статус окончательный.");
	Соответствие.Вставить("err_user_inactive", 					"Адрес когда-то существовал, но сейчас отключен. Доставка не удалась. Статус окончательный.");
	Соответствие.Вставить("err_mailbox_discarded", 				"Почтовый ящик получателя удален. Статус окончательный.");
	Соответствие.Вставить("err_mailbox_full", 					"Почтовый ящик получателя переполнен. Статус окончательный.");
	Соответствие.Вставить("err_no_dns", 						"Нет записи или некорректная запись в DNS.");
	Соответствие.Вставить("err_no_smtp", 						"Запись в DNS есть, но SMTP-сервер отсутствует.");
	Соответствие.Вставить("err_domain_inactive", 				"Домен не принимает почту или не существует. Статус окончательный.");
	Соответствие.Вставить("err_destination_misconfigured", 		"Домен не принимает почту из-за неверной настройки на стороне получателя, при этом ответ сервера содержит информацию об устранимой причине (например, используется неработающий блеклист и т. п.)");
	Соответствие.Вставить("err_spam_rejected", 					"Письмо отклонено сервером как спам.");
	Соответствие.Вставить("err_too_large", 						"Письмо превышает допустимый размер по данным сервера получателя. Также причиной может быть отклонение письма сервером получателя из-за непринимаемого типа вложения. Например, .exe.");
	Соответствие.Вставить("err_giveup", 						"В этот статус переводятся сообщения из статусов err_will_retry, err_resend после истечения срока повторных попыток.");
	Соответствие.Вставить("err_not_allowed", 					"Отправка отменена, так как сотрудники технической поддержки заблокировали рассылку из-за заблокированного адреса получателя или блокировки вашего аккаунта. Статус окончательный.");
	Соответствие.Вставить("err_spam_removed", 					"Отправка отменена из-за блокировки рассылки как спама. Статус неокончательный, может быть изменён на not_sent, delayed или err_spam_may_retry после переговоров с почтовой службой получателя.");
	Соответствие.Вставить("err_spam_may_retry", 				"Эквивалент err_spam_rejected, но вы можете переотправить сообщение путём генерации нового такого же письма.");
	Соответствие.Вставить("ok_spam_folder", 					"Письмо доставлено, но сервер получателя поместил его в папку «Спам». Статус окончательный.");
	Соответствие.Вставить("err_delivery_failed", 				"Доставка не удалась по иным причинам. Статус окончательный.");
	Соответствие.Вставить("err_will_retry", 					"Одна или несколько попыток доставки оказались неудачными, но попытки продолжаются. Статус неокончательный.");
	Соответствие.Вставить("err_skip_letter", 					"Отправка отменена, так как email адрес недоступен (кроме случаев err_unsubscribed и err_not_allowed).");
	Соответствие.Вставить("err_spam_skipped", 					"Отправка отменена из-за блокировки рассылки как спама. Результат неокончательный, может быть изменён на not_sent, delayed или err_spam_may_retry после переговоров с почтовой службой получателя.");
	Соответствие.Вставить("err_unsubscribed", 					"Отправка не выполнялась, т.к. адрес, по которому пытались отправить письмо, ранее отписался. Вы можете пометить этот адрес как отписавшийся и в своей базе данных и больше не отправлять на него. Статус окончательный.");
	Соответствие.Вставить("err_src_invalid", 					"Неправильный адрес отправителя. Используется, если «невалидность email отправителя» обнаружилась не на стадии приёма задания и проверки параметров, а на более поздней стадии, когда осуществляется детальная проверка того, что нужно отправить. Статус окончательный.");
	Соответствие.Вставить("err_dest_invalid", 					"Неправильный адрес получателя. Используется, если «невалидность email получателя» обнаружилась не на стадии приёма задания и проверки параметров, а на более поздней стадии, когда осуществляется подробная проверка того, что нужно отправить. Статус окончательный.");
	Соответствие.Вставить("err_over_quota", 					"Отправка отменена из-за нехватки средств на счету или из-за превышений по тарифу.");
	Соответствие.Вставить("err_not_available", 					"Адрес, по которому вы пытались отправить письмо, не является доступным (т.е. ранее отправки на него приводили к ответу от сервера вида  «адрес не существует» или «блокировка по спаму»). Доступность адреса теоретически может быть восстановлена через несколько дней или недель, поэтому можно его не вычёркивать из списка потенциальных адресатов. Статус окончательный.");
	Соответствие.Вставить("err_unreachable", 					"Отправка отменена, так как адрес недоступен, но, в отличие от статуса err_not_available, доступность адресу возвращена не будет. Статус окончательный.");
	Соответствие.Вставить("err_lost", 							"Письмо не было отправлено из-за несогласованности его частей (например, в теле письма передается ссылка на изображение во вложениях, но само изображение во вложениях не передано или было утеряно из-за сбоя на нашей стороне). Отправитель должен переотправить письмо самостоятельно, т.к. оригинал не сохранился. Статус окончательный.");
	Соответствие.Вставить("skip_dup_unreachable", 				"Адрес недоступен, отправка не удалась. Статус окончательный.");
	Соответствие.Вставить("skip_dup_temp_unreachable", 			"Адрес временно недоступен. Отправка не удалась. Статус окончательный.");
	Соответствие.Вставить("skip_dup_mailbox_full", 				"Почтовый ящик получателя переполнен. Статус окончательный.");
	
	Возврат Соответствие.Получить(Статус);
КонецФункции    

Функция ПеревестиСтатусДоставкиОК(Статус)
	
	Соответствие = Новый Соответствие;
	                                 	
	Соответствие.Вставить("ok_sent", 							"Отправлено");
	Соответствие.Вставить("ok_delivered", 						"Доставлено");
	Соответствие.Вставить("ok_read", 							"Открыто");
	Соответствие.Вставить("ok_fbl", 							"Отписался");
	Соответствие.Вставить("ok_link_visited", 					"ПереходПоСсылке");
	Соответствие.Вставить("ok_unsubscribed", 					"Отписался");
	Соответствие.Вставить("ok_spam_folder", 					"Отписался");
	
	Возврат Соответствие.Получить(Статус);
КонецФункции 

&НаСервере
Процедура ЗапроситьСтатистикуНаСервере()
	
	Метод = "getCampaignDeliveryStats";
	ИмяСобытия = "Отправить запрос в Unisender методом " + Метод;
	
	ПараметрыСервера = Новый Структура;
	ПараметрыСервера.Вставить("Сервер",	АдресСервера + "/async/");
	ПараметрыСервера.Вставить("key", 	ApiKey);
	ПараметрыСервера.Вставить("api", Метод);
	ПараметрыСервера.Вставить("ИмяСобытия", ИмяСобытия); 
	
	// подготовка параметров запроса
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("format", "json"); 
	СтруктураПараметров.Вставить("api_key", ApiKey); 
	СтруктураПараметров.Вставить("campaign_id", ИДРассылки);
	
	ОбработкаОбъект	= РеквизитФормыВЗначение("Объект");  
	ОтветСервера = ОбработкаОбъект.getCampaignDeliveryStats(ПараметрыСервера, СтруктураПараметров); 
    Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда 
		Если Не ОтветСервера.Свойство("result") Тогда
			Возврат                                                                                            
		КонецЕсли;
		ИдентификаторСтатистика = ОтветСервера.result.task_uuid;
		СвойствоИдСтатистика = ПланыВидовХарактеристик.СвойстваДокументов.НайтиПоНаименованию("Unisender.ИД статистики");  
		ЗаписатьСвойство(Мероприятие, СвойствоИдСтатистика, ИдентификаторСтатистика);  
	КонецЕсли; 

КонецПроцедуры

&НаСервере                                                  
Процедура ПолучитьСтатистикуНаСервере()
	
	Метод = "getTaskResult";
	ИмяСобытия = "Отправить запрос в Unisender методом " + Метод;
	
	ПараметрыСервера = Новый Структура;
	ПараметрыСервера.Вставить("Сервер",	АдресСервера + "/async/");
	ПараметрыСервера.Вставить("key", 	ApiKey);
	ПараметрыСервера.Вставить("api", Метод);
	ПараметрыСервера.Вставить("ИмяСобытия", ИмяСобытия); 
	
	// подготовка параметров запроса
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("format", "json"); 
	СтруктураПараметров.Вставить("api_key", ApiKey); 
	СтруктураПараметров.Вставить("task_uuid", ИдентификаторСтатистика);
	
	ОбработкаОбъект	= РеквизитФормыВЗначение("Объект");  
	ОтветСервера = ОбработкаОбъект.getTaskResult(ПараметрыСервера, СтруктураПараметров); 
	Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда 
		Если Не ОтветСервера.Свойство("result") Тогда
			Возврат
		КонецЕсли;   
		Если ОтветСервера.result.status = "completed" Тогда
			СсылкаНаДокумент = ОтветСервера.result.file_to_download; 
		КонецЕсли; 
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюНаСервере()
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаДокумент) Тогда 
		Возврат
	КонецЕсли;
	
	РеквизитОбъект = РеквизитФормыВЗначение("Объект");
	Ответ = РеквизитОбъект.ЗагрузитьФайлCSV(СсылкаНаДокумент);
	
	Если НЕ ТипЗнч(Ответ) = Тип("ТаблицаЗначений") Тогда
		Возврат
	КонецЕсли;    
	
	ДокументОбъект = Мероприятие.ПолучитьОбъект(); 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЗ.email,
	               |	ТЗ.last_update,
	               |	ТЗ.send_result
	               |ПОМЕСТИТЬ вт_ответ
	               |ИЗ
	               |	&ТЗ КАК ТЗ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МероприятиеУчастники.email,
	               |	вт_ответ.send_result
	               |ИЗ
	               |	Документ.Мероприятие.Участники КАК МероприятиеУчастники
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_ответ КАК вт_ответ
	               |		ПО (ПОДСТРОКА(МероприятиеУчастники.email, 0, 50) = ПОДСТРОКА(вт_ответ.email, 0, 50))
	               |ГДЕ
	               |	МероприятиеУчастники.Ссылка = &Мероприятие"; 
	
	Запрос.УстановитьПараметр("ТЗ",Ответ);  
	Запрос.УстановитьПараметр("Мероприятие",Мероприятие); 

	ВыборкаТЗ = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр Из ВыборкаТЗ Цикл 
		
		СтрокиПоиска = ДокументОбъект.Участники.НайтиСтроки(Новый Структура("email",Стр.email)); 
		Если НЕ СтрокиПоиска.Количество() Тогда
			Продолжить;
		КонецЕсли; 
		
		Для Каждого стрПоиск из СтрокиПоиска Цикл
			стрПоиск.Участвовал = Истина; 
			Статус = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр.send_result, "_");
			Если Статус[0] = "err" Или Статус[0] = "skip" Тогда
				стрПоиск.КодОшибки = Стр.send_result;
			ИначеЕсли Статус[0] = "ok" Тогда
				РеквизитСтатус = ПеревестиСтатусДоставкиОК(Стр.send_result);
				Если РеквизитСтатус = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				стрПоиск[РеквизитСтатус] = Истина;
			Иначе
				Продолжить;	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ДокументОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти
