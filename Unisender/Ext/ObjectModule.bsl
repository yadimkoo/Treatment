#Область ПрограммныйИнтерфейс
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция СведенияОВнешнейОбработке() Экспорт
		
	РегистрационныеДанные = Новый Структура;
    РегистрационныеДанные.Вставить("Наименование", 		"Выгрузить в Unisender");
    РегистрационныеДанные.Вставить("Версия", 			"1.0");
    РегистрационныеДанные.Вставить("БезопасныйРежим", 	Ложь);
    РегистрационныеДанные.Вставить("Информация", 		"Работа с Unisender.
														|Выгрузка списка рассылок
														|Создание пустой рассылки	
														|Проверка статуса");
    РегистрационныеДанные.Вставить("Вид", 				"Действие");
    РегистрационныеДанные.Вставить("Картинка", 			"ПереслатьПисьмо");

    Возврат РегистрационныеДанные;
	
КонецФункции

#КонецОбласти  

#Область СлужебныеПроцедурыИФункции

#Область РаботаСHTTP

Функция ЗапросНаСервер(ИмяСкрипта, СтрокаЗапроса, АдресСервера = Неопределено) Экспорт
	
	Если АдресСервера = Неопределено Тогда
		АдресСервера	= ПолучитьСтрутуруНастроек().АдресСервера; 
	КонецЕсли;
    ЗаголовокHTTP = Новый Соответствие();
    ЗаголовокHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
    ЗаголовокHTTP.Вставить("Accept-Language", "ru");
    ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
    ЗаголовокHTTP.Вставить("Content-Language", "ru");
    ЗаголовокHTTP.Вставить("Content-Charset", "utf-8");
	
	Соединение	= Новый HTTPСоединение(АдресСервера, , , , , 300, Новый ЗащищенноеСоединениеOpenSSL);
	Запрос		= Новый HTTPЗапрос(ИмяСкрипта, ЗаголовокHTTP);
	Запрос.УстановитьТелоИзСтроки(СтрокаЗапроса, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
	                         
	Ответ	= Соединение.ОтправитьДляОбработки(Запрос);
	строкаОтветаСервера	= Ответ.ПолучитьТелоКакСтроку();
	Возврат строкаОтветаСервера;    
	
КонецФункции 

Функция РазобратьОтветСервера(СтрокаОтветаСервера, Ошибка = Ложь, текстОшибки = "")
	
	СтруктураОтветаСервера	= СтруктураИзJSON(СтрокаОтветаСервера);
	Если СтруктураОтветаСервера.Свойство("result") Тогда
		Ответ	= Новый Структура("Результат", СтруктураОтветаСервера.result);
	ИначеЕсли СтруктураОтветаСервера.Свойство("error") Тогда
		Ответ	= Неопределено;
		Ошибка	= Истина;
		текстОшибки	= СтруктураОтветаСервера.error;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(текстОшибки);
	Иначе
		Ответ	= Неопределено;
		Ошибка	= Истина;
		текстОшибки	= "Неизвестная ошибка. " + СтрокаОтветаСервера;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(текстОшибки);
	КонецЕсли; 
	
	Возврат Ответ;  
	
КонецФункции

Функция ЗапросGET(ПараметрыСервера, АдресРесурса, ИмяСобытия)

	HTTPСоединение = HTTPСоединениеSSL(ПараметрыСервера, ИмяСобытия); //Подключится к серверу
	
	Если HTTPСоединение = Неопределено Тогда Возврат 0 КонецЕсли;
	
	//GET
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса); 
	ФайлРезультата = ПолучитьИмяВременногоФайла(".txt"); 

	Попытка
		HTTPОтвет =  HTTPСоединение.Получить(HTTPЗапрос, ФайлРезультата); //Get
	Исключение
		// исключение здесь говорит о том, что запрос не дошел до HTTP-Сервера
		Текстовочка  = "Произошла сетевая ошибка! " + ОписаниеОшибки();
		#Если Клиент Тогда			
			Сообщить(Текстовочка, СтатусСообщения.Информация);
		#КонецЕсли
		ВызватьИсключение;
	КонецПопытки;

	КодСостояния   = HTTPОтвет.КодСостояния;
    ТекстОтвета    = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	СостояниеОтвета = РазобратьКодОтветаСHTTP(АдресРесурса, HTTPОтвет, ИмяСобытия);
	Если ЗначениеЗаполнено(СостояниеОтвета) Тогда
		СтруктураJSON = ЧтениеСтруктурыJSONизФайла(ФайлРезультата);
		
		Возврат СтруктураJSON; //Возврат структуры
		
		ЗапуститьПриложение(СокрЛП(ФайлРезультата)); //Для проверка, Открываем файл запроса
		
		ТекстовыйФайл = Новый ТекстовыйДокумент;
		ТекстовыйФайл.Прочитать(
		        ФайлРезультата,
		        // Если не указать кодировку напрямую, то она
		        // по возможности определится автоматически.
		        КодировкаТекста.UTF8, 
		        // К этом значению будут приведены разделители
		        // строк из файла. Если ничего не указывать -
		        // останутся родные.
		        Символы.ВК + Символы.ПС
		    );		 
		Возврат ТекстовыйФайл.ПолучитьТекст();
	Иначе
		Возврат 0;
	КонецЕсли; 
	
КонецФункции 

Функция HTTPСоединениеSSL(ПараметрыСервера, ИмяСобытия)

	Попытка
		//HTTPСоединение = Новый HTTPСоединение(ПараметрыСервера.СерверММС,,,,,, Новый ЗащищенноеСоединениеOpenSSL);
		HTTPСоединение = Новый HTTPСоединение(ПараметрыСервера.Сервер, , , , , 30, Новый ЗащищенноеСоединениеOpenSSL);	
		Возврат HTTPСоединение;
	Исключение
	    Текстовочка = "Не удалось установить соединение с сервером " + ПараметрыСервера.Сервер + " " 
	        + Символы.ПС + ИнформацияОбОшибке().Описание;
		#Если Клиент Тогда			
			Сообщить(Текстовочка, СтатусСообщения.Важное);
		#КонецЕсли
		
	    Возврат Неопределено;
	КонецПопытки;

КонецФункции 

Функция РазобратьКодОтветаСHTTP(АдресРесурса, HTTPОтвет, ИмяСобытия)

	// Анализируем фатальные ошибки
	// В большинстве случаев нужно остановить работу и показать пользователю сообщение об ошибке,
	// включив в него HTTP-статус

	// Ошибки 4XX говорят о неправильном запросе - в широком смысле
	// Может быть неправильный адрес, ошибка аутентификации, плохой формат запроса
	// Подробнее смотри http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4
	Если HTTPОтвет.КодСостояния >= 400 и HTTPОтвет.КодСостояния < 500  Тогда
		Текстовочка  = "Код статуса 4XX, ошибка запроса.  Код статуса: " + HTTPОтвет.КодСостояния + " Строка получения: " + АдресРесурса;
		#Если Клиент Тогда			
			Сообщить(Текстовочка, СтатусСообщения.Информация);
		#КонецЕсли
		Возврат Неопределено;
	КонецЕсли;
	 
	 // Ошибки 5XX говорят о проблемах на сервере (возможно, прокси-сервере)
	 // Это может быть программная ошибка, нехватка памяти, ошибка конфигурации и т.д.
	 // Подробнее смотри http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5
	Если HTTPОтвет.КодСостояния >= 500 и HTTPОтвет.КодСостояния < 600  Тогда
		Текстовочка  = "Код статуса 5XX, ошибка сервера. Код статуса: " + HTTPОтвет.КодСостояния + " Строка получения: " + АдресРесурса;
		#Если Клиент Тогда			
			Сообщить(Текстовочка, СтатусСообщения.Информация);
		#КонецЕсли
		Возврат Неопределено;
	КонецЕсли;
	 
	 // Обрабатываем перенаправление
	Если HTTPОтвет.КодСостояния >= 300 и HTTPОтвет.КодСостояния < 400  Тогда
		Текстовочка  = "Код статуса 3XX, Перенаправление. Код статуса: " + HTTPОтвет.КодСостояния + " Строка получения: " + АдресРесурса;
		#Если Клиент Тогда			
			Сообщить(Текстовочка, СтатусСообщения.Информация);
		#КонецЕсли
		Если HTTPОтвет.КодСостояния = 302 Тогда
			Текстовочка  = "Код статуса 302, Постоянное перенаправление.";
			#Если Клиент Тогда			
				Сообщить(Текстовочка, СтатусСообщения.Информация);
			#КонецЕсли
			АдресРесурса = HTTPОтвет.Заголовки.Получить("Location");
			Если АдресРесурса <> Неопределено Тогда
				Текстовочка  = "Выполняю запрос по новому адресу " + АдресРесурса;
				#Если Клиент Тогда			
					Сообщить(Текстовочка, СтатусСообщения.Информация);
				#КонецЕсли
					//dsfПолучитьДанныеСHTTP(ПараметрыСервера, АдресРесурса);
			Иначе
				Текстовочка  = "Сервер не сообщил адрес ресурса! " + АдресРесурса;
				#Если Клиент Тогда			
					Сообщить(Текстовочка, СтатусСообщения.Информация);
				#КонецЕсли
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Статусы 1XX и 2XX считаем хорошими
	Если HTTPОтвет.КодСостояния < 300 Тогда 
		Возврат 1;
	КонецЕсли; 

КонецФункции 

#КонецОбласти

#Область Методы 

Функция createList(Наименование) Экспорт 
	
	ИмяСкрипта	= "/createList"; 
	СтрокаЗапросаНаСервер = _("%format=json&api_key=%1&title=%2", ПолучитьСтрутуруНастроек().ApiKey, Наименование);
	СтрокаОтветаСервера		= ЗапросНаСервер(ИмяСкрипта, СтрокаЗапросаНаСервер);
	Ошибка		= Ложь;
	текстОшибки	= "";
	СтруктураОтвета	= РазобратьОтветСервера(СтрокаОтветаСервера, Ошибка, текстОшибки);	
	КодЛиста		= "";
	Если НЕ Ошибка Тогда
		КодЛиста	= СтруктураОтвета.Результат.id;
	КонецЕсли; 	
	Возврат КодЛиста;
	
КонецФункции

Функция importContacts(ТаблицаАдресов, overwrite_lists = Ложь, idКниги) Экспорт
	ИмяСкрипта		= "/importContacts";
	
	РазмерПорции	= 500;
	СтрокаНачала	= 0;
	
	Пока СтрокаНачала < ТаблицаАдресов.Количество() Цикл		
		СтрокаЗапросаНаСервер	= СтрокаЗапросаImportContacts(ТаблицаАдресов, overwrite_lists, СтрокаНачала, РазмерПорции, idКниги);
		СтрокаНачала			= СтрокаНачала + РазмерПорции;
		СтрокаОтветаСервера		= ЗапросНаСервер(ИмяСкрипта, СтрокаЗапросаНаСервер);
		Ошибка		= Ложь;
		текстОшибки	= "";
		СтруктураОтвета	= РазобратьОтветСервера(СтрокаОтветаСервера, Ошибка, текстОшибки);
		Если Ошибка Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Успешно			= Не Ошибка;	
	Возврат Успешно;
КонецФункции

Функция createEmailMessageUnisender(ПараметрыСервера, СтруктураПараметров,  
				sender_name, sender_email, subject, body, list_id, text_body, generate_text, raw_body, 
				message_format, tag, attachments, template_id, system_template_id, wrap_type, categories) Экспорт
				
	СтруктураПараметров.Вставить("sender_name", sender_name); //Имя отправителя. Произвольная строка, не совпадающая с e-mail адресом (аргумент sender_email).
	СтруктураПараметров.Вставить("sender_email", sender_email); //E-mail адрес отправителя. Этот e-mail должен быть проверен (для этого надо создать вручную хотя бы одно письмо с этим обратным адресом через веб-интерфейс, затем нажать на ссылку «отправьте запрос подтверждения» и перейти по ссылке из письма).
	СтруктураПараметров.Вставить("subject", subject); //Строка с темой письма. Может включать поля подстановки. Параметр не обязателен, если указывается template_id
	СтруктураПараметров.Вставить("body", body); //Текст письма в формате HTML с возможностью добавлять поля подстановки. Вы можете вставить изображение, передав его как файл-вложение (см. описание аргумента attachments).
	СтруктураПараметров.Вставить("list_id", list_id); //Код списка, по которому будет произведена отправка e-mail рассылки. 
	СтруктураПараметров.Вставить("text_body", text_body); //Текстовый вариант письма. По умолчанию отсутствует. Если вы не предоставляете текстовый вариант наряду с HTML-вариантом, рекомендуем установить параметер generate_text в 1 для автоматической генерации текстовой части письма.
	СтруктураПараметров.Вставить("generate_text", generate_text); //0 или 1, по умолчанию 0. Значение 1 означает, что генерация текстовой части письма будет выполнена автоматически по HTML-части. 
	СтруктураПараметров.Вставить("raw_body", raw_body); //Предназначен для сохранения json структуры структуры данных блочного редактора (при значении message_format=block). 
	СтруктураПараметров.Вставить("message_format", message_format); //Определяет способ создания письма: «block» — блочный редактор, «raw_html» — html редактор, «text» — текст. 1. Если передать в этом параметре значение «text», то в случае, если оба параметра body и text_body будут заполнены,параметр body будет проигнорирован, а письмо будет создано из данных,переданных в параметре text_body.
	СтруктураПараметров.Вставить("tag", tag); //Метка. Если задана, то отправка рассылки письма будет производиться не по всему списку, а только по тем адресатам, которым присвоена заданная метка.
	СтруктураПараметров.Вставить("attachments", attachments); //Ассоциативный массив файлов-вложений. В качестве ключа указывается имя файла, в качестве значения — бинарное содержимое файла (base64 использовать нельзя!), например:attachments[quotes.txt]=text%20file%content
	СтруктураПараметров.Вставить("lang", "ru"); //Двухбуквенный код языка для автоматически добавляемой в каждое письмо строки со ссылкой отписки.
	СтруктураПараметров.Вставить("template_id", template_id); //id пользовательского шаблона письма, созданного ранее, на основе которого можно создать письмо. Значение можно получить с помощью getTemplates или listTemplates. Передав этот параметр, можно не заполнять обязательные параметры subject, body, а также text_body и lang. 
	СтруктураПараметров.Вставить("system_template_id", system_template_id); //id системного шаблона письма, на основе которого можно создать письмо. Значение можно получить с помощью getTemplates или listTemplates. Передав этот параметр, можно не заполнять обязательные параметры subject, body, а также text_body и lang. 
	СтруктураПараметров.Вставить("wrap_type", wrap_type); //Выравнивание текста сообщения по заданному краю. Если аргумент отсутствует, то выравнивание производиться не будет. Может иметь значения: skip (не применять), right (выравнивание по правому краю), left (выравнивание по левому краю), center (выравнивание по центру).
	СтруктураПараметров.Вставить("categories", categories); //Категории письма, перечисленные в текстовом виде через запятую
	
	ПараметрыЗапроса = СформироватьСтрокуПараметровЗапроса(СтруктураПараметров);
	
	АдресРесурса = "/" + ПараметрыСервера.api + "?" + ПараметрыЗапроса;
	
	Ответ = ЗапросGET(ПараметрыСервера, АдресРесурса, ПараметрыСервера.ИмяСобытия);
	
	Возврат Ответ;
	
КонецФункции  

Функция checkEmail(ПараметрыСервера, СтруктураПараметров, email_id) Экспорт
	
	СтруктураПараметров.Вставить("email_id", email_id); //Адрес получателя сообщения.
	
	ПараметрыЗапроса = СформироватьСтрокуПараметровЗапроса(СтруктураПараметров);
	
	АдресРесурса = "/ru/api/" + ПараметрыСервера.api + "?" + ПараметрыЗапроса;

	Ответ = ЗапросНаСервер(ПараметрыСервера.api,АдресРесурса);
	
	Возврат Ответ;
	
КонецФункции // checkEmailUnisender()

Функция getCampaignStatus(ПараметрыСервера, СтруктураПараметров, email_id) Экспорт
	
	СтруктураПараметров.Вставить("campaign_id", email_id); //Адрес получателя сообщения.
	
	ПараметрыЗапроса = СформироватьСтрокуПараметровЗапроса(СтруктураПараметров);
	
	АдресРесурса = "/ru/api/" + ПараметрыСервера.api + "?" + ПараметрыЗапроса;

	Ответ = ЗапросНаСервер(ПараметрыСервера.api,АдресРесурса);
	
	Возврат Ответ;
	
КонецФункции 

Функция getCampaigns(ПараметрыСервера, СтруктураПараметров) Экспорт
	
	ПараметрыЗапроса = СформироватьСтрокуПараметровЗапроса(СтруктураПараметров);
	
	АдресРесурса = "/ru/api/" + ПараметрыСервера.api + "?" + ПараметрыЗапроса;

	Ответ = ЗапросНаСервер(ПараметрыСервера.api,АдресРесурса);
	
	Возврат СтруктураИзJSON(Ответ);
	
КонецФункции 

Функция getCampaignDeliveryStats(ПараметрыСервера, СтруктураПараметров) Экспорт
	
	ПараметрыЗапроса = СформироватьСтрокуПараметровЗапроса(СтруктураПараметров);
	
	АдресРесурса = "/" + ПараметрыСервера.api + "?" + ПараметрыЗапроса;
	
	Ответ = ЗапросGET(ПараметрыСервера, АдресРесурса,ПараметрыСервера.ИмяСобытия);
	
	Возврат Ответ; 
	
КонецФункции

Функция getTaskResult(ПараметрыСервера, СтруктураПараметров) Экспорт
	
	ПараметрыЗапроса = СформироватьСтрокуПараметровЗапроса(СтруктураПараметров);
	
	АдресРесурса = "/" + ПараметрыСервера.api + "?" + ПараметрыЗапроса;
	
	Ответ = ЗапросGET(ПараметрыСервера, АдресРесурса,ПараметрыСервера.ИмяСобытия);
	
	Возврат Ответ; 
	
КонецФункции



#КонецОбласти

#Область Прочее

Функция ПолучитьСтрутуруНастроек() Экспорт 
	
	Настройки = Новый Структура;
	Настройки.Вставить("АдресСервера", "api.unisender.com/ru/api");
	Настройки.Вставить("ApiKey", _("Unisender.ApiKey"));
	
	Возврат Настройки	

КонецФункции  

Функция _СтрШаблон(Шаблон, Параметр1=Неопределено, Параметр2=Неопределено, Параметр3=Неопределено,Параметр4=Неопределено,Параметр5=Неопределено,Параметр6=Неопределено,Параметр7=Неопределено,Параметр8=Неопределено,Параметр9=Неопределено,Параметр10=Неопределено) 
	Результат = Шаблон;
	
	Для сч = -10 По -1 Цикл
		Параметр = Вычислить("Параметр" + (-сч));
		Если Параметр = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Найти(Результат, "%("+(-сч)+")") = 0 И Найти(Результат, "%"+(-сч))=0 Тогда
			ВызватьИсключение "Слишком много фактических параметров";
		КонецЕсли;
		Результат = СтрЗаменить(Результат, "%("+ (-сч) + ")", Параметр);
		Результат = СтрЗаменить(Результат, "%"+ (-сч), Параметр);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция СтруктураИзJSON(текстЗапроса, МассивДат = "", ФорматДаты = Неопределено) Экспорт  
	
	Если ФорматДаты = Неопределено Тогда
		ФорматДаты	= ФорматДатыJSON.ISO;
	КонецЕсли; 
	ЧтениеJSON	= Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(текстЗапроса);
	Структура	= ПрочитатьJSON(ЧтениеJSON, Ложь, МассивДат, ФорматДаты);
	ЧтениеJSON.Закрыть();
	
	Возврат Структура;    
	
КонецФункции 

Функция СтрокаЗапросаImportContacts(ТаблицаАдресов, overwrite_lists = Ложь, НачатьСоСтроки = 0, РазмерПорции = 400, idКниги)
	
	ШаблонСтрокиЗапроса		= "format=json&api_key=%1&overwrite_lists=%2";
	ШаблонОписанияПоля		= "&field_names[%1]=%2";
	ШаблонОписанияДанных	= "&data[%1][%2]=%3";
	СтрокаЗапроса			= _СтрШаблон(ШаблонСтрокиЗапроса, ПолучитьСтрутуруНастроек().ApiKey, ?(overwrite_lists, "1", "0"));
	
	Колонки				= ТаблицаАдресов.Колонки;
	КоличествоКолонок	= Колонки.Количество();
	
	Для инд = 0 По КоличествоКолонок - 1 Цикл
		стр				= Колонки[инд].Имя;
		СтрокаЗапроса	= СтрокаЗапроса + _СтрШаблон(ШаблонОписанияПоля, инд, стр);
	КонецЦикла; 

	Для индСтр = 0 по РазмерПорции-1 Цикл	
		текИнд	= индСтр + НачатьСоСтроки;
		Если текИнд > ТаблицаАдресов.Количество() - 1 Тогда 
			Прервать;
		КонецЕсли;
		стр = ТаблицаАдресов[текИнд];
		Для индКол = 0 По КоличествоКолонок - 1 Цикл 
			Данные	= стр[индКол];
			Если ЗначениеЗаполнено(Данные) Тогда
				Если ТипЗнч(данные) = Тип("Булево") Тогда
					стрДанные	    = ?(Данные, "true", "false");
					СтрокаЗапроса	= строкаЗапроса + _СтрШаблон(ШаблонОписанияДанных, индСтр, индКол, стрДанные);
				Иначе
					СтрокаЗапроса 	= строкаЗапроса + _СтрШаблон(ШаблонОписанияДанных, индСтр, индКол, Данные);
				КонецЕсли; 				
			КонецЕсли; 			
		КонецЦикла;		
	КонецЦикла; 
	
	Возврат СтрокаЗапроса;   
	
КонецФункции

Функция СформироватьСтрокуПараметровЗапроса(ПараметрыЗапроса)
	СтрокаЗапроса = "";
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Если НЕ ЗначениеЗаполнено(Параметр.Значение) Тогда Продолжить КонецЕсли;
		
		Если Не ПустаяСтрока(СтрокаЗапроса) Тогда
			СтрокаЗапроса = СтрокаЗапроса + "&";
		КонецЕсли;
		
		Если ТипЗнч(Параметр.Значение) = Тип("Массив") Тогда
		    Индекс1 = 0;
			Массив1 = Параметр.Значение;
			Кол1 = Массив1.Количество();
			Для каждого Строка1 Из Массив1 Цикл
				
				Если ТипЗнч(Строка1) = Тип("Массив") Тогда
					Индекс2 = 0;
					Массив2 = Строка1;
					Кол2 = Массив2.Количество();
					Для каждого Строка2 Из Массив2 Цикл

						СтрокаЗапроса = СтрокаЗапроса + Параметр.Ключ + "["+Индекс1+"]["+ Индекс2 +"]=" + Строка2;
						
						Индекс2 = Индекс2 + 1;
						
						Если Кол2 <> Индекс2 Тогда
							СтрокаЗапроса = СтрокаЗапроса + "&";
						КонецЕсли;
					КонецЦикла;
					
				Иначе
					СтрокаЗапроса = СтрокаЗапроса + Параметр.Ключ + "["+Индекс1+"]=" + Строка1;
				КонецЕсли;

				Индекс1 = Индекс1 + 1;
				
				Если Кол1 <> Индекс1 Тогда
					СтрокаЗапроса = СтрокаЗапроса + "&";
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли Параметр.Ключ = "params" И ТипЗнч(Параметр.Значение) = Тип("Структура") Тогда
			Индекс3 = 0;
			Кол3 = Параметр.Значение.Количество();
			Для каждого стрПарам Из Параметр.Значение Цикл

				Если НЕ ЗначениеЗаполнено(стрПарам.Значение) Тогда Продолжить КонецЕсли;
				
				СтрокаЗапроса = СтрокаЗапроса + Параметр.Ключ + "["+стрПарам.Ключ+"]=" + стрПарам.Значение;
				
				Индекс3 = Индекс3 + 1;
				
				Если Кол3 <> Индекс3 Тогда
					СтрокаЗапроса = СтрокаЗапроса + "&";
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			СтрокаЗапроса = СтрокаЗапроса + Параметр.Ключ + "=" + Параметр.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыЗапросаСервера = СтрокаЗапроса; //{+Для проверки
	
	Возврат СтрокаЗапроса;
КонецФункции

Функция ЧтениеСтруктурыJSONизФайла(ФайлJSON)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(ФайлJSON);
	СтруктураJSON = ПрочитатьJSON(ЧтениеJSON);	
	ЧтениеJSON.Закрыть();
	
	Возврат СтруктураJSON;
КонецФункции 

Функция ЗагрузитьФайлCSV(СсылкаНаФайл) Экспорт
	
	Результат = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(СсылкаНаФайл);
	
	ПрочитанныйФайл = Новый ТекстовыйДокумент;
	ПрочитанныйФайл.Прочитать(Результат.Путь);  
	
	ДанныеИзФайла = новый ТаблицаЗначений;
	Разделитель = ","; 
	
	Шапка = ПрочитанныйФайл.ПолучитьСтроку(1);
	МассивКол = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Шапка, Разделитель); 
	
	Для Каждого ИмяСт Из МассивКол Цикл
		ИмяБП = СтрЗаменить(ИмяСт," ","");
		ДанныеИзФайла.Колонки.Добавить(ИмяБП,Новый ОписаниеТипов("Строка"), ИмяСт);
	КонецЦикла;  
	
	Для НомерСтроки=2 по ПрочитанныйФайл.КоличествоСтрок() Цикл
		Строка = ПрочитанныйФайл.ПолучитьСтроку(НомерСтроки);
		МассивКол = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка,Разделитель);
		НоваяСтрочка= ДанныеИзФайла.Добавить();
		Для НомерСтолбца= 1 по МассивКол.Количество() Цикл
			ТекущееЗначение = МассивКол[НомерСтолбца-1];
			ИмяКолонки = ДанныеИзФайла.Колонки[НомерСтолбца-1].Имя;
			НоваяСтрочка[ИмяКолонки] = ТекущееЗначение;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДанныеИзФайла
	
КонецФункции

#КонецОбласти

#КонецОбласти